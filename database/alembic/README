
# Alembic Migrations Project

This repository is dedicated to managing database schema migrations using [Alembic](https://alembic.sqlalchemy.org/). Alembic is a lightweight database migration tool for use with SQLAlchemy and is an excellent choice for handling database version control.

## Prerequisites

- Python =>3.10
- [Alembic](https://alembic.sqlalchemy.org/)
- [SQLAlchemy](https://www.sqlalchemy.org/)

create virtualenv 

Install the required packages using:

```bash
pip install -r requirements.txt
```

## Project Setup

1. Initialize Alembic: If Alembic hasn't been initialized in your project, set it up using the following command:

```bash
    alembic init alembic
```

    This creates an `alembic` folder with the necessary configuration files.

2. **Configure Alembic**: Update `alembic.ini` to point to your database. Set the connection string in the `sqlalchemy.url` field:

    ```ini
    sqlalchemy.url = postgresql://user:password@localhost/dbname
    ```

3. **Define Models**: Make sure your SQLAlchemy models are defined and accessible to Alembic.

4. **Autogenerate Migrations**: Enable Alembic to detect changes in your SQLAlchemy models and create migrations.

## Creating Migrations

Follow these steps to create new migrations:

1. **Make Model Changes**: Update your SQLAlchemy models with any new fields, tables, or relationships.

2. **Autogenerate a Migration Script**:

    ```bash
    alembic revision --autogenerate -m "create_subscription_table"
    ```

    This command generates a new migration file under the `versions` directory within the `alembic` folder.

3. **Review the Migration Script**: Open the generated migration file and verify that the schema changes are accurate.

4. **Apply the Migration**:

    ```bash
    alembic upgrade head
    ```

    This command applies the migration to the database, updating it to the latest schema.

## Running Migrations

To apply all migrations and bring the database to the latest version, use:

```bash
alembic upgrade head
```

To downgrade the database to a previous version:

```bash
alembic downgrade <revision>
```

## Additional Commands

- **Show current revision**:

    ```bash
    alembic current
    ```

- **View migration history**:

    ```bash
    alembic history
    ```

- **Rollback last migration**:

    ```bash
    alembic downgrade -1
    ```
- **Delete/remove revision before applying it
```bash
rm alembic/versions/47be69569eb2_create_subscription_table.py 
```
## Best Practices

- Always review autogenerated migration files before applying them.
- Ensure all migrations are applied in a testing environment before deploying to production.

## License

